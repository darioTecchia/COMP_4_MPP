
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package dist;

import java_cup.runtime.*;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import java.util.ArrayList;
import syntax.*;
import syntax.expr.*;
import syntax.type.*;
import syntax.statement.*;
import syntax.expr.unaryexpr.*;
import syntax.expr.binaryexpr.arithop.*;
import syntax.expr.binaryexpr.relop.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\103\000\002\002\004\000\002\002\004\000\002\003" +
    "\005\000\002\003\002\000\002\004\004\000\002\004\003" +
    "\000\002\005\013\000\002\005\012\000\002\006\007\000" +
    "\002\006\005\000\002\007\010\000\002\007\006\000\002" +
    "\010\004\000\002\010\002\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\005\000\002\011\007\000\002\011\006\000" +
    "\002\012\005\000\002\012\003\000\002\013\005\000\002" +
    "\013\003\000\002\014\003\000\002\014\007\000\002\014" +
    "\007\000\002\014\011\000\002\014\013\000\002\014\007" +
    "\000\002\014\005\000\002\014\010\000\002\014\006\000" +
    "\002\014\004\000\002\014\004\000\002\014\004\000\002" +
    "\015\005\000\002\015\003\000\002\016\005\000\002\016" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\006\000\002\017\003\000\002\017\006\000\002" +
    "\017\006\000\002\017\005\000\002\017\005\000\002\017" +
    "\005\000\002\017\005\000\002\017\005\000\002\017\005" +
    "\000\002\017\005\000\002\017\005\000\002\017\005\000" +
    "\002\017\005\000\002\017\005\000\002\017\005\000\002" +
    "\017\004\000\002\017\004\000\002\017\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\236\000\006\004\ufffe\016\006\001\002\000\004\002" +
    "\240\001\002\000\004\004\130\001\002\000\004\024\007" +
    "\001\002\000\004\042\012\001\002\000\004\006\011\001" +
    "\002\000\004\004\uffff\001\002\000\020\025\022\026\021" +
    "\027\017\030\020\031\013\032\016\034\015\001\002\000" +
    "\122\006\uffef\007\uffef\010\uffef\011\uffef\012\uffef\013\uffef" +
    "\014\uffef\015\uffef\020\uffef\021\uffef\022\uffef\023\uffef\024" +
    "\uffef\025\uffef\033\uffef\034\uffef\035\uffef\036\uffef\037\uffef" +
    "\040\uffef\041\uffef\043\uffef\044\uffef\045\uffef\046\uffef\047" +
    "\uffef\050\uffef\051\uffef\052\uffef\054\uffef\055\uffef\056\uffef" +
    "\057\uffef\060\uffef\061\uffef\063\uffef\064\uffef\065\uffef\066" +
    "\uffef\067\uffef\001\002\000\010\006\ufff4\041\ufff4\054\040" +
    "\001\002\000\020\025\022\026\021\027\017\030\020\031" +
    "\013\032\016\034\015\001\002\000\022\025\022\026\021" +
    "\027\017\030\020\031\013\032\016\033\025\034\015\001" +
    "\002\000\122\006\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1" +
    "\013\ufff1\014\ufff1\015\ufff1\020\ufff1\021\ufff1\022\ufff1\023" +
    "\ufff1\024\ufff1\025\ufff1\033\ufff1\034\ufff1\035\ufff1\036\ufff1" +
    "\037\ufff1\040\ufff1\041\ufff1\043\ufff1\044\ufff1\045\ufff1\046" +
    "\ufff1\047\ufff1\050\ufff1\051\ufff1\052\ufff1\054\ufff1\055\ufff1" +
    "\056\ufff1\057\ufff1\060\ufff1\061\ufff1\063\ufff1\064\ufff1\065" +
    "\ufff1\066\ufff1\067\ufff1\001\002\000\122\006\ufff0\007\ufff0" +
    "\010\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0\020" +
    "\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0\033\ufff0" +
    "\034\ufff0\035\ufff0\036\ufff0\037\ufff0\040\ufff0\041\ufff0\043" +
    "\ufff0\044\ufff0\045\ufff0\046\ufff0\047\ufff0\050\ufff0\051\ufff0" +
    "\052\ufff0\054\ufff0\055\ufff0\056\ufff0\057\ufff0\060\ufff0\061" +
    "\ufff0\063\ufff0\064\ufff0\065\ufff0\066\ufff0\067\ufff0\001\002" +
    "\000\122\006\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2\013" +
    "\ufff2\014\ufff2\015\ufff2\020\ufff2\021\ufff2\022\ufff2\023\ufff2" +
    "\024\ufff2\025\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2\037" +
    "\ufff2\040\ufff2\041\ufff2\043\ufff2\044\ufff2\045\ufff2\046\ufff2" +
    "\047\ufff2\050\ufff2\051\ufff2\052\ufff2\054\ufff2\055\ufff2\056" +
    "\ufff2\057\ufff2\060\ufff2\061\ufff2\063\ufff2\064\ufff2\065\ufff2" +
    "\066\ufff2\067\ufff2\001\002\000\122\006\ufff3\007\ufff3\010" +
    "\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3\020\ufff3" +
    "\021\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3\033\ufff3\034" +
    "\ufff3\035\ufff3\036\ufff3\037\ufff3\040\ufff3\041\ufff3\043\ufff3" +
    "\044\ufff3\045\ufff3\046\ufff3\047\ufff3\050\ufff3\051\ufff3\052" +
    "\ufff3\054\ufff3\055\ufff3\056\ufff3\057\ufff3\060\ufff3\061\ufff3" +
    "\063\ufff3\064\ufff3\065\ufff3\066\ufff3\067\ufff3\001\002\000" +
    "\006\033\uffea\040\033\001\002\000\004\033\030\001\002" +
    "\000\004\053\026\001\002\000\020\025\022\026\021\027" +
    "\017\030\020\031\013\032\016\034\015\001\002\000\122" +
    "\006\uffec\007\uffec\010\uffec\011\uffec\012\uffec\013\uffec\014" +
    "\uffec\015\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024\uffec" +
    "\025\uffec\033\uffec\034\uffec\035\uffec\036\uffec\037\uffec\040" +
    "\uffec\041\uffec\043\uffec\044\uffec\045\uffec\046\uffec\047\uffec" +
    "\050\uffec\051\uffec\052\uffec\054\uffec\055\uffec\056\uffec\057" +
    "\uffec\060\uffec\061\uffec\063\uffec\064\uffec\065\uffec\066\uffec" +
    "\067\uffec\001\002\000\004\053\031\001\002\000\020\025" +
    "\022\026\021\027\017\030\020\031\013\032\016\034\015" +
    "\001\002\000\122\006\uffed\007\uffed\010\uffed\011\uffed\012" +
    "\uffed\013\uffed\014\uffed\015\uffed\020\uffed\021\uffed\022\uffed" +
    "\023\uffed\024\uffed\025\uffed\033\uffed\034\uffed\035\uffed\036" +
    "\uffed\037\uffed\040\uffed\041\uffed\043\uffed\044\uffed\045\uffed" +
    "\046\uffed\047\uffed\050\uffed\051\uffed\052\uffed\054\uffed\055" +
    "\uffed\056\uffed\057\uffed\060\uffed\061\uffed\063\uffed\064\uffed" +
    "\065\uffed\066\uffed\067\uffed\001\002\000\020\025\022\026" +
    "\021\027\017\030\020\031\013\032\016\034\015\001\002" +
    "\000\004\033\uffeb\001\002\000\004\035\036\001\002\000" +
    "\122\006\uffee\007\uffee\010\uffee\011\uffee\012\uffee\013\uffee" +
    "\014\uffee\015\uffee\020\uffee\021\uffee\022\uffee\023\uffee\024" +
    "\uffee\025\uffee\033\uffee\034\uffee\035\uffee\036\uffee\037\uffee" +
    "\040\uffee\041\uffee\043\uffee\044\uffee\045\uffee\046\uffee\047" +
    "\uffee\050\uffee\051\uffee\052\uffee\054\uffee\055\uffee\056\uffee" +
    "\057\uffee\060\uffee\061\uffee\063\uffee\064\uffee\065\uffee\066" +
    "\uffee\067\uffee\001\002\000\006\006\ufff6\041\124\001\002" +
    "\000\030\022\054\023\043\024\053\025\046\034\052\057" +
    "\041\063\044\064\042\065\047\066\050\067\051\001\002" +
    "\000\030\022\054\023\043\024\053\025\046\034\052\057" +
    "\041\063\044\064\042\065\047\066\050\067\051\001\002" +
    "\000\056\006\uffd3\010\uffd3\011\uffd3\013\uffd3\020\uffd3\033" +
    "\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\043\uffd3\044\uffd3" +
    "\045\uffd3\046\uffd3\047\uffd3\050\uffd3\051\uffd3\052\uffd3\056" +
    "\uffd3\057\uffd3\060\uffd3\061\uffd3\001\002\000\030\022\054" +
    "\023\043\024\053\025\046\034\052\057\041\063\044\064" +
    "\042\065\047\066\050\067\051\001\002\000\056\006\uffd4" +
    "\010\uffd4\011\uffd4\013\uffd4\020\uffd4\033\uffd4\036\uffd4\037" +
    "\uffd4\040\uffd4\041\uffd4\043\uffd4\044\uffd4\045\uffd4\046\uffd4" +
    "\047\uffd4\050\uffd4\051\uffd4\052\uffd4\056\uffd4\057\uffd4\060" +
    "\uffd4\061\uffd4\001\002\000\040\006\ufff5\036\060\041\ufff5" +
    "\043\057\044\072\045\071\046\064\047\063\050\070\051" +
    "\066\052\061\056\062\057\056\060\067\061\065\001\002" +
    "\000\056\006\uffd7\010\uffd7\011\uffd7\013\uffd7\020\uffd7\033" +
    "\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7\043\uffd7\044\uffd7" +
    "\045\uffd7\046\uffd7\047\uffd7\050\uffd7\051\uffd7\052\uffd7\056" +
    "\uffd7\057\uffd7\060\uffd7\061\uffd7\001\002\000\056\006\uffd2" +
    "\010\uffd2\011\uffd2\013\uffd2\020\uffd2\033\uffd2\036\uffd2\037" +
    "\uffd2\040\uffd2\041\uffd2\043\uffd2\044\uffd2\045\uffd2\046\uffd2" +
    "\047\uffd2\050\uffd2\051\uffd2\052\uffd2\056\uffd2\057\uffd2\060" +
    "\uffd2\061\uffd2\001\002\000\056\006\uffd6\010\uffd6\011\uffd6" +
    "\013\uffd6\020\uffd6\033\uffd6\036\uffd6\037\uffd6\040\uffd6\041" +
    "\uffd6\043\uffd6\044\uffd6\045\uffd6\046\uffd6\047\uffd6\050\uffd6" +
    "\051\uffd6\052\uffd6\056\uffd6\057\uffd6\060\uffd6\061\uffd6\001" +
    "\002\000\056\006\uffd5\010\uffd5\011\uffd5\013\uffd5\020\uffd5" +
    "\033\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5\043\uffd5\044" +
    "\uffd5\045\uffd5\046\uffd5\047\uffd5\050\uffd5\051\uffd5\052\uffd5" +
    "\056\uffd5\057\uffd5\060\uffd5\061\uffd5\001\002\000\004\035" +
    "\117\001\002\000\060\006\uffd0\010\uffd0\011\uffd0\013\uffd0" +
    "\020\uffd0\032\111\033\uffd0\036\uffd0\037\uffd0\040\uffd0\041" +
    "\uffd0\043\uffd0\044\uffd0\045\uffd0\046\uffd0\047\uffd0\050\uffd0" +
    "\051\uffd0\052\uffd0\056\uffd0\057\uffd0\060\uffd0\061\uffd0\001" +
    "\002\000\030\022\054\023\043\024\053\025\046\034\052" +
    "\057\041\063\044\064\042\065\047\066\050\067\051\001" +
    "\002\000\056\006\uffc0\010\uffc0\011\uffc0\013\uffc0\020\uffc0" +
    "\033\uffc0\036\060\037\uffc0\040\uffc0\041\uffc0\043\057\044" +
    "\072\045\071\046\064\047\063\050\070\051\066\052\061" +
    "\056\062\057\056\060\067\061\065\001\002\000\030\022" +
    "\054\023\043\024\053\025\046\034\052\057\041\063\044" +
    "\064\042\065\047\066\050\067\051\001\002\000\030\022" +
    "\054\023\043\024\053\025\046\034\052\057\041\063\044" +
    "\064\042\065\047\066\050\067\051\001\002\000\030\022" +
    "\054\023\043\024\053\025\046\034\052\057\041\063\044" +
    "\064\042\065\047\066\050\067\051\001\002\000\030\022" +
    "\054\023\043\024\053\025\046\034\052\057\041\063\044" +
    "\064\042\065\047\066\050\067\051\001\002\000\030\022" +
    "\054\023\043\024\053\025\046\034\052\057\041\063\044" +
    "\064\042\065\047\066\050\067\051\001\002\000\030\022" +
    "\054\023\043\024\053\025\046\034\052\057\041\063\044" +
    "\064\042\065\047\066\050\067\051\001\002\000\030\022" +
    "\054\023\043\024\053\025\046\034\052\057\041\063\044" +
    "\064\042\065\047\066\050\067\051\001\002\000\030\022" +
    "\054\023\043\024\053\025\046\034\052\057\041\063\044" +
    "\064\042\065\047\066\050\067\051\001\002\000\030\022" +
    "\054\023\043\024\053\025\046\034\052\057\041\063\044" +
    "\064\042\065\047\066\050\067\051\001\002\000\030\022" +
    "\054\023\043\024\053\025\046\034\052\057\041\063\044" +
    "\064\042\065\047\066\050\067\051\001\002\000\030\022" +
    "\054\023\043\024\053\025\046\034\052\057\041\063\044" +
    "\064\042\065\047\066\050\067\051\001\002\000\030\022" +
    "\054\023\043\024\053\025\046\034\052\057\041\063\044" +
    "\064\042\065\047\066\050\067\051\001\002\000\030\022" +
    "\054\023\043\024\053\025\046\034\052\057\041\063\044" +
    "\064\042\065\047\066\050\067\051\001\002\000\056\006" +
    "\uffc8\010\uffc8\011\uffc8\013\uffc8\020\uffc8\033\uffc8\036\uffc8" +
    "\037\uffc8\040\uffc8\041\uffc8\043\uffc8\044\uffc8\045\uffc8\046" +
    "\uffc8\047\uffc8\050\uffc8\051\uffc8\052\uffc8\056\062\057\056" +
    "\060\067\061\065\001\002\000\056\006\uffc5\010\uffc5\011" +
    "\uffc5\013\uffc5\020\uffc5\033\uffc5\036\uffc5\037\uffc5\040\uffc5" +
    "\041\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5\050" +
    "\uffc5\051\uffc5\052\uffc5\056\062\057\056\060\067\061\065" +
    "\001\002\000\056\006\uffc2\010\uffc2\011\uffc2\013\uffc2\020" +
    "\uffc2\033\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2\043\uffc2" +
    "\044\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2\051\uffc2\052" +
    "\uffc2\056\062\057\056\060\067\061\065\001\002\000\056" +
    "\006\uffcb\010\uffcb\011\uffcb\013\uffcb\020\uffcb\033\uffcb\036" +
    "\uffcb\037\uffcb\040\uffcb\041\uffcb\043\uffcb\044\uffcb\045\uffcb" +
    "\046\uffcb\047\uffcb\050\uffcb\051\uffcb\052\uffcb\056\uffcb\057" +
    "\uffcb\060\uffcb\061\uffcb\001\002\000\056\006\uffc7\010\uffc7" +
    "\011\uffc7\013\uffc7\020\uffc7\033\uffc7\036\uffc7\037\uffc7\040" +
    "\uffc7\041\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7" +
    "\050\uffc7\051\uffc7\052\uffc7\056\062\057\056\060\067\061" +
    "\065\001\002\000\056\006\uffca\010\uffca\011\uffca\013\uffca" +
    "\020\uffca\033\uffca\036\uffca\037\uffca\040\uffca\041\uffca\043" +
    "\uffca\044\uffca\045\uffca\046\uffca\047\uffca\050\uffca\051\uffca" +
    "\052\uffca\056\uffca\057\uffca\060\uffca\061\uffca\001\002\000" +
    "\056\006\uffc4\010\uffc4\011\uffc4\013\uffc4\020\uffc4\033\uffc4" +
    "\036\uffc4\037\uffc4\040\uffc4\041\uffc4\043\uffc4\044\uffc4\045" +
    "\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4\056\062" +
    "\057\056\060\067\061\065\001\002\000\056\006\uffc3\010" +
    "\uffc3\011\uffc3\013\uffc3\020\uffc3\033\uffc3\036\uffc3\037\uffc3" +
    "\040\uffc3\041\uffc3\043\uffc3\044\uffc3\045\uffc3\046\uffc3\047" +
    "\uffc3\050\uffc3\051\uffc3\052\uffc3\056\062\057\056\060\067" +
    "\061\065\001\002\000\056\006\uffcd\010\uffcd\011\uffcd\013" +
    "\uffcd\020\uffcd\033\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd" +
    "\043\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd\050\uffcd\051" +
    "\uffcd\052\uffcd\056\uffcd\057\uffcd\060\067\061\065\001\002" +
    "\000\056\006\uffc6\010\uffc6\011\uffc6\013\uffc6\020\uffc6\033" +
    "\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\043\uffc6\044\uffc6" +
    "\045\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6\056" +
    "\062\057\056\060\067\061\065\001\002\000\036\036\060" +
    "\037\106\043\057\044\072\045\071\046\064\047\063\050" +
    "\070\051\066\052\061\056\062\057\056\060\067\061\065" +
    "\001\002\000\056\006\uffcf\010\uffcf\011\uffcf\013\uffcf\020" +
    "\uffcf\033\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\043\uffcf" +
    "\044\uffcf\045\uffcf\046\uffcf\047\uffcf\050\uffcf\051\uffcf\052" +
    "\uffcf\056\uffcf\057\uffcf\060\uffcf\061\uffcf\001\002\000\056" +
    "\006\uffc9\010\uffc9\011\uffc9\013\uffc9\020\uffc9\033\uffc9\036" +
    "\uffc9\037\uffc9\040\uffc9\041\uffc9\043\uffc9\044\uffc9\045\uffc9" +
    "\046\uffc9\047\uffc9\050\uffc9\051\uffc9\052\uffc9\056\062\057" +
    "\056\060\067\061\065\001\002\000\056\006\uffcc\010\uffcc" +
    "\011\uffcc\013\uffcc\020\uffcc\033\uffcc\036\uffcc\037\uffcc\040" +
    "\uffcc\041\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc\047\uffcc" +
    "\050\uffcc\051\uffcc\052\uffcc\056\uffcc\057\uffcc\060\067\061" +
    "\065\001\002\000\030\022\054\023\043\024\053\025\046" +
    "\034\052\057\041\063\044\064\042\065\047\066\050\067" +
    "\051\001\002\000\042\020\uffd8\033\uffd8\036\060\040\115" +
    "\043\057\044\072\045\071\046\064\047\063\050\070\051" +
    "\066\052\061\056\062\057\056\060\067\061\065\001\002" +
    "\000\004\033\114\001\002\000\056\006\uffce\010\uffce\011" +
    "\uffce\013\uffce\020\uffce\033\uffce\036\uffce\037\uffce\040\uffce" +
    "\041\uffce\043\uffce\044\uffce\045\uffce\046\uffce\047\uffce\050" +
    "\uffce\051\uffce\052\uffce\056\uffce\057\uffce\060\uffce\061\uffce" +
    "\001\002\000\030\022\054\023\043\024\053\025\046\034" +
    "\052\057\041\063\044\064\042\065\047\066\050\067\051" +
    "\001\002\000\006\020\uffd9\033\uffd9\001\002\000\004\042" +
    "\120\001\002\000\020\025\022\026\021\027\017\030\020" +
    "\031\013\032\016\034\015\001\002\000\056\006\uffd1\010" +
    "\uffd1\011\uffd1\013\uffd1\020\uffd1\033\uffd1\036\uffd1\037\uffd1" +
    "\040\uffd1\041\uffd1\043\uffd1\044\uffd1\045\uffd1\046\uffd1\047" +
    "\uffd1\050\uffd1\051\uffd1\052\uffd1\056\uffd1\057\uffd1\060\uffd1" +
    "\061\uffd1\001\002\000\056\006\uffbf\010\uffbf\011\uffbf\013" +
    "\uffbf\020\uffbf\033\uffbf\036\060\037\uffbf\040\uffbf\041\uffbf" +
    "\043\057\044\072\045\071\046\064\047\063\050\070\051" +
    "\066\052\061\056\062\057\056\060\067\061\065\001\002" +
    "\000\056\006\uffc1\010\uffc1\011\uffc1\013\uffc1\020\uffc1\033" +
    "\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1\043\uffc1\044\uffc1" +
    "\045\uffc1\046\uffc1\047\uffc1\050\uffc1\051\uffc1\052\uffc1\056" +
    "\uffc1\057\uffc1\060\067\061\065\001\002\000\004\024\007" +
    "\001\002\000\006\006\ufff7\041\ufff7\001\002\000\006\002" +
    "\ufffc\004\130\001\002\000\004\002\001\001\002\000\004" +
    "\024\131\001\002\000\004\032\132\001\002\000\006\024" +
    "\133\033\135\001\002\000\004\042\233\001\002\000\004" +
    "\033\226\001\002\000\004\042\136\001\002\000\020\025" +
    "\022\026\021\027\017\030\020\031\013\032\016\034\015" +
    "\001\002\000\044\007\146\012\141\014\153\015\142\021" +
    "\144\022\054\023\043\024\150\025\046\034\052\055\145" +
    "\057\041\063\044\064\042\065\047\066\050\067\051\001" +
    "\002\000\010\006\uffe8\011\uffe8\041\224\001\002\000\030" +
    "\022\054\023\043\024\053\025\046\034\052\057\041\063" +
    "\044\064\042\065\047\066\050\067\051\001\002\000\004" +
    "\024\007\001\002\000\004\006\213\001\002\000\030\022" +
    "\054\023\043\024\053\025\046\034\052\057\041\063\044" +
    "\064\042\065\047\066\050\067\051\001\002\000\010\006" +
    "\uffe7\011\uffe7\041\uffe7\001\002\000\030\022\054\023\043" +
    "\024\053\025\046\034\052\057\041\063\044\064\042\065" +
    "\047\066\050\067\051\001\002\000\040\020\uffd8\036\176" +
    "\040\115\043\057\044\072\045\071\046\064\047\063\050" +
    "\070\051\066\052\061\056\062\057\056\060\067\061\065" +
    "\001\002\000\046\017\uffda\020\uffd0\032\167\036\uffd0\040" +
    "\166\043\uffd0\044\uffd0\045\uffd0\046\uffd0\047\uffd0\050\uffd0" +
    "\051\uffd0\052\uffd0\054\170\056\uffd0\057\uffd0\060\uffd0\061" +
    "\uffd0\001\002\000\004\020\165\001\002\000\004\017\164" +
    "\001\002\000\004\024\154\001\002\000\004\054\155\001" +
    "\002\000\030\022\054\023\043\024\053\025\046\034\052" +
    "\057\041\063\044\064\042\065\047\066\050\067\051\001" +
    "\002\000\036\036\060\040\157\043\057\044\072\045\071" +
    "\046\064\047\063\050\070\051\066\052\061\056\062\057" +
    "\056\060\067\061\065\001\002\000\030\022\054\023\043" +
    "\024\053\025\046\034\052\057\041\063\044\064\042\065" +
    "\047\066\050\067\051\001\002\000\036\013\161\036\060" +
    "\043\057\044\072\045\071\046\064\047\063\050\070\051" +
    "\066\052\061\056\062\057\056\060\067\061\065\001\002" +
    "\000\044\007\146\012\141\014\153\015\142\021\144\022" +
    "\054\023\043\024\150\025\046\034\052\055\145\057\041" +
    "\063\044\064\042\065\047\066\050\067\051\001\002\000" +
    "\004\006\163\001\002\000\010\006\uffe3\011\uffe3\041\uffe3" +
    "\001\002\000\010\006\uffde\011\uffde\041\uffde\001\002\000" +
    "\010\006\uffdd\011\uffdd\041\uffdd\001\002\000\004\024\174" +
    "\001\002\000\030\022\054\023\043\024\053\025\046\034" +
    "\052\057\041\063\044\064\042\065\047\066\050\067\051" +
    "\001\002\000\030\022\054\023\043\024\053\025\046\034" +
    "\052\057\041\063\044\064\042\065\047\066\050\067\051" +
    "\001\002\000\042\006\uffe1\011\uffe1\036\060\041\uffe1\043" +
    "\057\044\072\045\071\046\064\047\063\050\070\051\066" +
    "\052\061\056\062\057\056\060\067\061\065\001\002\000" +
    "\004\033\173\001\002\000\046\006\uffdf\011\uffdf\020\uffce" +
    "\036\uffce\040\uffce\041\uffdf\043\uffce\044\uffce\045\uffce\046" +
    "\uffce\047\uffce\050\uffce\051\uffce\052\uffce\056\uffce\057\uffce" +
    "\060\uffce\061\uffce\001\002\000\006\017\uffda\040\166\001" +
    "\002\000\004\017\uffdb\001\002\000\030\022\054\023\043" +
    "\024\053\025\046\034\052\057\041\063\044\064\042\065" +
    "\047\066\050\067\051\001\002\000\036\036\060\037\200" +
    "\043\057\044\072\045\071\046\064\047\063\050\070\051" +
    "\066\052\061\056\062\057\056\060\067\061\065\001\002" +
    "\000\042\020\uffcf\036\uffcf\040\uffcf\043\uffcf\044\uffcf\045" +
    "\uffcf\046\uffcf\047\uffcf\050\uffcf\051\uffcf\052\uffcf\054\201" +
    "\056\uffcf\057\uffcf\060\uffcf\061\uffcf\001\002\000\030\022" +
    "\054\023\043\024\053\025\046\034\052\057\041\063\044" +
    "\064\042\065\047\066\050\067\051\001\002\000\042\006" +
    "\uffe0\011\uffe0\036\060\041\uffe0\043\057\044\072\045\071" +
    "\046\064\047\063\050\070\051\066\052\061\056\062\057" +
    "\056\060\067\061\065\001\002\000\036\010\204\036\060" +
    "\043\057\044\072\045\071\046\064\047\063\050\070\051" +
    "\066\052\061\056\062\057\056\060\067\061\065\001\002" +
    "\000\044\007\146\012\141\014\153\015\142\021\144\022" +
    "\054\023\043\024\150\025\046\034\052\055\145\057\041" +
    "\063\044\064\042\065\047\066\050\067\051\001\002\000" +
    "\006\006\207\011\206\001\002\000\044\007\146\012\141" +
    "\014\153\015\142\021\144\022\054\023\043\024\150\025" +
    "\046\034\052\055\145\057\041\063\044\064\042\065\047" +
    "\066\050\067\051\001\002\000\010\006\uffe5\011\uffe5\041" +
    "\uffe5\001\002\000\004\006\211\001\002\000\010\006\uffe4" +
    "\011\uffe4\041\uffe4\001\002\000\042\006\uffdc\011\uffdc\036" +
    "\060\041\uffdc\043\057\044\072\045\071\046\064\047\063" +
    "\050\070\051\066\052\061\056\062\057\056\060\067\061" +
    "\065\001\002\000\006\002\ufffa\004\ufffa\001\002\000\004" +
    "\041\215\001\002\000\044\007\146\012\141\014\153\015" +
    "\142\021\144\022\054\023\043\024\150\025\046\034\052" +
    "\055\145\057\041\063\044\064\042\065\047\066\050\067" +
    "\051\001\002\000\004\006\217\001\002\000\010\006\uffe2" +
    "\011\uffe2\041\uffe2\001\002\000\036\013\221\036\060\043" +
    "\057\044\072\045\071\046\064\047\063\050\070\051\066" +
    "\052\061\056\062\057\056\060\067\061\065\001\002\000" +
    "\044\007\146\012\141\014\153\015\142\021\144\022\054" +
    "\023\043\024\150\025\046\034\052\055\145\057\041\063" +
    "\044\064\042\065\047\066\050\067\051\001\002\000\004" +
    "\006\223\001\002\000\010\006\uffe6\011\uffe6\041\uffe6\001" +
    "\002\000\044\007\146\012\141\014\153\015\142\021\144" +
    "\022\054\023\043\024\150\025\046\034\052\055\145\057" +
    "\041\063\044\064\042\065\047\066\050\067\051\001\002" +
    "\000\006\006\uffe9\011\uffe9\001\002\000\004\042\227\001" +
    "\002\000\020\025\022\026\021\027\017\030\020\031\013" +
    "\032\016\034\015\001\002\000\044\007\146\012\141\014" +
    "\153\015\142\021\144\022\054\023\043\024\150\025\046" +
    "\034\052\055\145\057\041\063\044\064\042\065\047\066" +
    "\050\067\051\001\002\000\004\006\232\001\002\000\006" +
    "\002\ufffb\004\ufffb\001\002\000\020\025\022\026\021\027" +
    "\017\030\020\031\013\032\016\034\015\001\002\000\006" +
    "\033\ufff8\040\235\001\002\000\004\024\133\001\002\000" +
    "\004\033\ufff9\001\002\000\004\002\ufffd\001\002\000\004" +
    "\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\236\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\006\004\126\005\125\001\001\000\004\007\007" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\013\001\001\000\002\001\001\000\004" +
    "\010\036\001\001\000\004\011\034\001\001\000\006\011" +
    "\022\012\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\031\001" +
    "\001\000\002\001\001\000\006\011\022\012\033\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\044\001\001\000\004\017\122" +
    "\001\001\000\002\001\001\000\004\017\121\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\054\001\001\000\002" +
    "\001\001\000\004\017\107\001\001\000\004\017\106\001" +
    "\001\000\004\017\104\001\001\000\004\017\103\001\001" +
    "\000\004\017\102\001\001\000\004\017\101\001\001\000" +
    "\004\017\100\001\001\000\004\017\077\001\001\000\004" +
    "\017\076\001\001\000\004\017\075\001\001\000\004\017" +
    "\074\001\001\000\004\017\073\001\001\000\004\017\072" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\016\112\017\111\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\016\115\017\111\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\120\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\124\001" +
    "\001\000\002\001\001\000\006\004\236\005\125\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\133\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\136\001\001\000\014\013" +
    "\142\014\137\015\151\016\150\017\146\001\001\000\002" +
    "\001\001\000\004\017\217\001\001\000\004\007\213\001" +
    "\001\000\002\001\001\000\004\017\211\001\001\000\002" +
    "\001\001\000\004\017\202\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\155\001\001\000" +
    "\002\001\001\000\004\017\157\001\001\000\002\001\001" +
    "\000\014\013\161\014\137\015\151\016\150\017\146\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\174\001\001\000\006\016" +
    "\171\017\111\001\001\000\004\017\170\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\176\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\201\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\013\204\014\137" +
    "\015\151\016\150\017\146\001\001\000\002\001\001\000" +
    "\014\013\207\014\137\015\151\016\150\017\146\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\013\215\014\137\015\151\016\150\017\146\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\013\221\014\137\015\151\016\150\017\146\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\013\224\014\137" +
    "\015\151\016\150\017\146\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\227\001\001\000\014\013\230" +
    "\014\137\015\151\016\150\017\146\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\233\001\001\000\002" +
    "\001\001\000\004\006\235\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= Global Functions 
            {
              Program RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Global ::= GLOBAL Var_decls END 
            {
              Global RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Global",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Global ::= 
            {
              Global RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Global",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Functions ::= Def_fun Functions 
            {
              ArrayList<Function> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Functions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Functions ::= Def_fun 
            {
              ArrayList<Function> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Functions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Def_fun ::= FUNCTION ID LPAR Par_decls RPAR COLON Type Statements END 
            {
              Function RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Def_fun",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Def_fun ::= FUNCTION ID LPAR RPAR COLON Type Statements END 
            {
              Function RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Def_fun",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Par_decls ::= ID COLON Type COMMA Par_decls 
            {
              ArrayList<ParDecl> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Par_decls",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Par_decls ::= ID COLON Type 
            {
              ArrayList<ParDecl> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Par_decls",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Var_decls ::= ID COLON Type Var_init_value SEMI Var_decls 
            {
              ArrayList<VarDecl> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Var_decls",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Var_decls ::= ID COLON Type Var_init_value 
            {
              ArrayList<VarDecl> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Var_decls",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Var_init_value ::= ASSIGN Expr 
            {
              VarInitValue RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Var_init_value",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Var_init_value ::= 
            {
              VarInitValue RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Var_init_value",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Type ::= NIL 
            {
              Type RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Type ::= INT 
            {
              Type RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Type ::= BOOL 
            {
              Type RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Type ::= FLOAT 
            {
              Type RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Type ::= STRING 
            {
              Type RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Type ::= BLPAR Type BRPAR 
            {
              Type RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Type ::= LPAR Types RPAR ARROW Type 
            {
              Type RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Type ::= LPAR RPAR ARROW Type 
            {
              Type RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Types ::= Type COMMA Types 
            {
              ArrayList<Type> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Types",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Types ::= Type 
            {
              ArrayList<Type> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Types",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Statements ::= Stat SEMI Statements 
            {
              ArrayList<Statement> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statements",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Statements ::= Stat 
            {
              ArrayList<Statement> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statements",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Stat ::= NOP 
            {
              Statement RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Stat ::= WHILE Expr DO Statements END 
            {
              Statement RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Stat ::= IF Expr THEN Statements END 
            {
              Statement RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Stat ::= IF Expr THEN Statements ELSE Statements END 
            {
              Statement RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Stat ::= FOR ID ASSIGN Expr COMMA Expr DO Statements END 
            {
              Statement RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Stat ::= LOCAL Var_decls SEMI Statements END 
            {
              Statement RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Stat ::= ID ASSIGN Expr 
            {
              Statement RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Stat ::= Expr SLPAR Expr SRPAR ASSIGN Expr 
            {
              Statement RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Stat ::= ID LPAR Exprs RPAR 
            {
              Statement RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Stat ::= Vars READ 
            {
              Statement RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Stat ::= Exprs WRITE 
            {
              Statement RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Stat ::= RETURN Expr 
            {
              Statement RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Vars ::= ID COMMA Vars 
            {
              ArrayList<Id> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Vars",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Vars ::= ID 
            {
              ArrayList<Id> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Vars",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Exprs ::= Expr COMMA Exprs 
            {
              ArrayList<Expr> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exprs",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Exprs ::= Expr 
            {
              ArrayList<Expr> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exprs",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Expr ::= NIL 
            {
              Expr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Expr ::= TRUE 
            {
              Expr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Expr ::= FALSE 
            {
              Expr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Expr ::= INT_CONST 
            {
              Expr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Expr ::= FLOAT_CONST 
            {
              Expr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Expr ::= STRING_CONST 
            {
              Expr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Expr ::= BLPAR BRPAR COLON Type 
            {
              Expr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Expr ::= ID 
            {
              Expr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Expr ::= Expr SLPAR Expr SRPAR 
            {
              Expr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Expr ::= ID LPAR Exprs RPAR 
            {
              Expr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Expr ::= Expr PLUS Expr 
            {
              Expr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Expr ::= Expr MINUS Expr 
            {
              Expr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Expr ::= Expr TIMES Expr 
            {
              Expr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Expr ::= Expr DIV Expr 
            {
              Expr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Expr ::= Expr AND Expr 
            {
              Expr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Expr ::= Expr OR Expr 
            {
              Expr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Expr ::= Expr GT Expr 
            {
              Expr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Expr ::= Expr GE Expr 
            {
              Expr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Expr ::= Expr LT Expr 
            {
              Expr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Expr ::= Expr LE Expr 
            {
              Expr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Expr ::= Expr EQ Expr 
            {
              Expr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Expr ::= Expr NE Expr 
            {
              Expr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Expr ::= MINUS Expr 
            {
              Expr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Expr ::= NOT Expr 
            {
              Expr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Expr ::= SHARP Expr 
            {
              Expr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
